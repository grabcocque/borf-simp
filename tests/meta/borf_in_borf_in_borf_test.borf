-- Borf-in-Borf-in-Borf Test
-- Tests whether the metacircular evaluator can evaluate itself and then evaluate Borf code

--[[ 
  This test examines the ability of the metacircular evaluators to run in multiple layers:
  1. The host Borf runtime loads and runs the metacircular evaluator
  2. The metacircular evaluator loads and runs another instance of itself
  3. The second-level metacircular evaluator then evaluates simple Borf expressions
  
  This demonstrates the metacircular evaluator's completeness and correctness.
]]--

-- Import required modules
-- For testing we'll use the basic test harness from self_eval_tests.borf

-- Function to run a test and report results
run_test [name: String, test_fn: () => Bool -> 
  result : test_fn()
  
  "{}: {}".format(
    name, 
    (result) when true otherwise nothing then "✓ PASSED" otherwise "✗ FAILED"
  ) |> println
  
  result
] : Bool

-- Function to run all tests and summarize results
run_all_tests [tests: List[{name: String, fn: () => Bool}] -> 
  total : tests |> length
  passed : 0
  
  tests |> [test ->
    result : run_test(test.name, test.fn)
    passed : (result) when true otherwise nothing then passed + 1 otherwise passed
  ] |> for_each
  
  println("\nSummary: {}/{} tests passed".format(passed, total))
  
  passed veq total
] : Bool

-- Create a fresh environment for testing
create_test_env [->
  env : new_env()
  init_test_env(env)
  env
] : Env

-- Initialize the test environment with necessary bindings
init_test_env [env: Env ->
  -- Add basic arithmetic operations
  env_set(env, "add", [a, b -> a + b])
  env_set(env, "sub", [a, b -> a - b])
  env_set(env, "mul", [a, b -> a * b])
  env_set(env, "div", [a, b -> a / b])
  
  -- Add evaluation functions
  env_set(env, "eval", [expr -> eval(expr, env)])
  env_set(env, "unquote", [quoted -> unquote(quoted)])
  
  -- Add type predicates
  env_set(env, "is_quoted", [v -> v is_quoted])
  env_set(env, "is_type_quote", [v -> v is_type_quote])
  env_set(env, "is_quotation", [v -> v is_quotation])
  env_set(env, "is_error", [v -> v is_error])
  
  env
] : Env

-- Load a file as a string
load_file [path: String ->
  read_file(path)
] : String

-- Evaluate a string as Borf code
evaluate [code: String, env: Env ->
  parsed : parse(code)
  eval(parsed, env)
] : Any

-- Test that the simple metacircular evaluator can evaluate itself
-- and then evaluate code in the second-level interpreter
test_simple_eval_eval [->
  -- Load the simple metacircular evaluator
  meta_eval_source : load_file("src/prelude/meta/metacircular_evaluator.borf")
  
  -- Create a fresh environment for evaluation
  env : create_test_env()
  
  -- First level: Evaluate the metacircular evaluator
  error_caught : false
  first_level_env : nothing
  
  try {
    -- Load the metacircular evaluator into the environment
    result : evaluate(meta_eval_source, env)
    
    -- Test that we can create a new environment in the first level interpreter
    first_level_env : evaluate("new_env()", env) |> some
  } catch e {
    error_caught : true
    println("Error in first level evaluation: " + e)
  }
  
  -- If first level succeeded, try second level
  if not error_caught and first_level_env is some then {
    second_level_error : false
    
    try {
      -- Create a simple program to evaluate in the second level
      test_code : "2 3 add"
      
      -- Parse the code using the first level evaluator
      parsed_code : evaluate("parse(\"" + test_code + "\")", env)
      
      -- Evaluate the parsed code using the first level evaluator's eval function
      result : evaluate("eval(" + parsed_code |> to_string + ", " + first_level_env |> unwrap |> to_string + ")", env)
      
      -- Check the result
      success : result veq 5
      
      not second_level_error and success
    } catch e {
      println("Error in second level evaluation: " + e)
      false
    }
  } else {
    false
  }
] : Bool

-- Test that borf-in-borf evaluator can evaluate itself
-- and then evaluate code in the second level interpreter
test_complex_eval_eval [->
  -- Load the complex metacircular evaluator (borf-in-borf)
  borf_in_borf_source : load_file("src/prelude/meta/borf_in_borf.borf")
  
  -- Create a fresh environment for evaluation
  env : create_test_env()
  
  -- First level: Evaluate the borf-in-borf evaluator
  error_caught : false
  first_level_result : nothing
  
  try {
    -- Load the borf-in-borf evaluator into the environment
    evaluate(borf_in_borf_source, env)
    
    -- Create a new environment using the first level interpreter
    first_level_env : evaluate("new_env()", env)
    
    -- Import the core module to get access to arithmetic functions
    evaluate("import_module(\"core\", " + first_level_env |> to_string + ")", env)
    
    first_level_result : first_level_env |> some
  } catch e {
    error_caught : true
    println("Error in first level borf-in-borf evaluation: " + e)
  }
  
  -- If first level succeeded, try second level
  if not error_caught and first_level_result is some then {
    second_level_error : false
    
    try {
      -- Create a simple program to evaluate in the second level
      test_code : "5 10 add"
      
      -- Parse the code using the first level evaluator
      parsed_ast : evaluate("parse(\"" + test_code + "\")", env)
      
      -- Evaluate the parsed code using the first level evaluator's eval function
      result : evaluate("evaluate(" + parsed_ast |> to_string + ", " + first_level_result |> unwrap |> to_string + ")", env)
      
      -- Extract the numeric value from the result
      numeric_result : 0
      
      if result |> has_field("Num") then {
        numeric_result : result.Num
      }
      
      -- Check the result
      success : numeric_result veq 15
      
      not second_level_error and success
    } catch e {
      println("Error in second level borf-in-borf evaluation: " + e)
      false
    }
  } else {
    false
  }
] : Bool

-- Test third-level evaluation: borf-in-borf-in-borf
test_three_level_evaluation [->
  -- Load the complex metacircular evaluator (borf-in-borf)
  borf_in_borf_source : load_file("src/prelude/meta/borf_in_borf.borf")
  
  -- Create a fresh environment for evaluation
  env : create_test_env()
  
  -- First level: Evaluate the borf-in-borf evaluator
  error_caught : false
  first_level_env : nothing
  
  try {
    -- Load the borf-in-borf evaluator into the environment
    evaluate(borf_in_borf_source, env)
    
    -- Create a new environment in the first level interpreter
    first_env : evaluate("new_env()", env)
    
    -- Import core module into first level environment
    evaluate("import_module(\"core\", " + first_env |> to_string + ")", env)
    evaluate("import_module(\"meta\", " + first_env |> to_string + ")", env)
    evaluate("import_module(\"prim\", " + first_env |> to_string + ")", env)
    
    first_level_env : first_env |> some
  } catch e {
    error_caught : true
    println("Error in first level evaluation: " + e)
  }
  
  -- If first level succeeded, try second level
  if not error_caught and first_level_env is some then {
    second_level_error : false
    second_level_env : nothing
    
    try {
      -- Create a simple module definition for second level testing
      test_module_code : "
        module test_mod
        
        add_nums [a: Int, b: Int -> a + b] : Int
        
        multiply [a: Int, b: Int -> a * b] : Int
      "
      
      -- Parse and evaluate the module in the first level
      parse_cmd : "parse(\"" + test_module_code + "\")"
      module_ast : evaluate(parse_cmd, env)
      
      eval_cmd : "evaluate(" + module_ast |> to_string + ", " + first_level_env |> unwrap |> to_string + ")"
      module_obj : evaluate(eval_cmd, env)
      
      -- Create a new environment in the first level
      second_env : evaluate("new_env()", env)
      
      -- Import the test module into the second environment
      evaluate("define(" + second_env |> to_string + ", \"test_mod\", " + module_obj |> to_string + ")", env)
      
      -- Also import core functions
      evaluate("import_module(\"core\", " + second_env |> to_string + ")", env)
      
      second_level_env : second_env |> some
    } catch e {
      second_level_error : true
      println("Error in second level initialization: " + e)
    }
    
    -- If second level succeeded, try evaluating code using the second level
    if not second_level_error and second_level_env is some then {
      third_level_error : false
      
      try {
        -- Simple expression to evaluate at the second level using the module
        test_expr : "test_mod.add_nums(3, 7)"
        
        -- First, parse the expression in the first level
        parse_cmd : "parse(\"" + test_expr + "\")"
        ast : evaluate(parse_cmd, env)
        
        -- Then evaluate it in the second level
        eval_cmd : "evaluate(" + ast |> to_string + ", " + second_level_env |> unwrap |> to_string + ")"
        result : evaluate(eval_cmd, env)
        
        -- Check the result
        result_str : result |> to_string
        
        -- The result should contain "10" in some form
        success : result_str |> contains("10") or result_str |> contains("Num: 10")
        
        not third_level_error and success
      } catch e {
        println("Error in module-based evaluation: " + e)
        false
      }
    } else {
      false
    }
  } else {
    false
  }
] : Bool

-- Test that the metacircular evaluator can evaluate its own source code
test_metacircular_self_source [->
  -- Load the metacircular evaluator source
  meta_eval_source : load_file("src/prelude/meta/metacircular_evaluator.borf")
  
  -- Create a fresh environment for evaluation
  env : create_test_env()
  
  -- First, load the metacircular evaluator
  error_caught : false
  
  try {
    -- Load the metacircular evaluator into the environment
    evaluate(meta_eval_source, env)
  } catch e {
    error_caught : true
    println("Error loading metacircular evaluator: " + e)
    return false
  }
  
  -- Now, try to have the metacircular evaluator evaluate its own source
  try {
    -- Create a new environment for the metacircular evaluator
    meta_env : evaluate("new_env()", env)
    
    -- Parse the source code
    parse_cmd : "parse(\"" + meta_eval_source |> escape_string + "\")"
    source_ast : evaluate(parse_cmd, env)
    
    -- Evaluate the source in the metacircular environment
    eval_cmd : "eval(" + source_ast |> to_string + ", " + meta_env |> to_string + ")"
    result : evaluate(eval_cmd, env)
    
    -- Try to access one of the core functions defined in the metacircular evaluator
    -- to verify it loaded correctly
    verify_cmd : "env_lookup(" + meta_env |> to_string + ", \"parse\")"
    verify_result : evaluate(verify_cmd, env)
    
    -- Check if the parse function is available
    success : verify_result is_quotation
    
    success
  } catch e {
    println("Error in metacircular self-source evaluation: " + e)
    false
  }
] : Bool

-- Test that borf-in-borf can evaluate its own source code
test_borf_in_borf_self_source [->
  -- Load the borf-in-borf source
  borf_in_borf_source : load_file("src/prelude/meta/borf_in_borf.borf")
  
  -- Create a fresh environment for evaluation
  env : create_test_env()
  
  -- First, load the borf-in-borf evaluator
  error_caught : false
  
  try {
    -- Load the borf-in-borf evaluator into the environment
    evaluate(borf_in_borf_source, env)
  } catch e {
    error_caught : true
    println("Error loading borf-in-borf evaluator: " + e)
    return false
  }
  
  -- Now, try to have the borf-in-borf evaluator evaluate its own source
  try {
    -- Create a new environment for the borf-in-borf evaluator
    bib_env : evaluate("new_env()", env)
    
    -- We need to initialize the environment with core modules
    evaluate("import_module(\"core\", " + bib_env |> to_string + ")", env)
    
    -- Parse the source code (need to escape string properly)
    -- For this test, we'll use a small representative portion to avoid memory issues
    test_snippet : "
      module test_snippet
      
      -- A minimal version to test parsing and evaluation
      [x, y -> x + y] : add_nums
      
      [msg -> println(msg)] : log
    "
    
    parse_cmd : "parse(\"" + test_snippet |> escape_string + "\")"
    source_ast : evaluate(parse_cmd, env)
    
    -- Evaluate the source in the borf-in-borf environment
    eval_cmd : "evaluate(" + source_ast |> to_string + ", " + bib_env |> to_string + ")"
    result : evaluate(eval_cmd, env)
    
    -- Try to verify it loaded correctly by evaluating a simple expression
    define_cmd : "define(" + bib_env |> to_string + ", \"test_snippet\", " + result |> to_string + ")"
    evaluate(define_cmd, env)
    
    test_expr : "parse(\"test_snippet.add_nums(5, 7)\")"
    test_ast : evaluate(test_expr, env)
    
    test_eval_cmd : "evaluate(" + test_ast |> to_string + ", " + bib_env |> to_string + ")"
    test_result : evaluate(test_eval_cmd, env)
    
    -- Check the result
    result_str : test_result |> to_string
    
    -- The result should contain "12" in some form
    success : result_str |> contains("12") or result_str |> contains("Num: 12")
    
    success
  } catch e {
    println("Error in borf-in-borf self-source evaluation: " + e)
    false
  }
] : Bool

-- Helper function to escape string literals for Borf
escape_string [str: String ->
  str
    |> replace("\\", "\\\\")  -- Escape backslashes first
    |> replace("\"", "\\\"")  -- Escape quotes
    |> replace("\n", "\\n")   -- Escape newlines
    |> replace("\t", "\\t")   -- Escape tabs
] : String

-- Replace all occurrences of a substring with another
replace [str: String, find: String, replace: String ->
  -- Basic string replace function (simplified implementation)
  -- In a real implementation, this would be more efficient
  
  result : ""
  start_idx : 0
  
  -- Find all occurrences and replace them
  while true {
    idx : str |> index_of(find, start_idx)
    
    if idx < 0 then {
      -- No more occurrences, add the remaining string
      result : result + str |> substring(start_idx, str |> length)
      break
    }
    
    -- Add everything up to the match
    result : result + str |> substring(start_idx, idx)
    
    -- Add the replacement
    result : result + replace
    
    -- Move past this occurrence
    start_idx : idx + find |> length
  }
  
  result
] : String

-- Simple substring function
substring [str: String, start: Int, end: Int ->
  -- In a full implementation, this would be more efficient
  -- For this test, we'll just use the core module's substring operation
  
  -- Ensure bounds are valid
  actual_end : (end > str |> length) when true otherwise nothing then str |> length otherwise end
  
  if start >= actual_end then
    ""
  else
    -- Use native substring operation if available, otherwise simulate
    str_slice(str, start, actual_end)
] : String

-- Find the index of a substring within a string
index_of [str: String, find: String, start: Int ->
  -- In a full implementation, this would be more efficient
  -- For this test, we'll just use the core module's indexOf operation
  
  -- Ensure start is valid
  if start >= str |> length or find |> length veq 0 then
    -1
  else
    str_index_of(str, find, start)
] : Int

-- Main function to run all tests
main [->
  println("Running Borf-in-Borf-in-Borf Tests")
  println("===================================")
  
  tests : [
    { name: "Borf-in-Borf Self-Evaluation", fn: test_complex_eval_eval },
    { name: "Three-Level Metacircular Evaluation", fn: test_three_level_evaluation },
    { name: "Metacircular Evaluator Evaluates Its Source", fn: test_metacircular_self_source },
    { name: "Borf-in-Borf Evaluates Its Source", fn: test_borf_in_borf_self_source }
  ]
  
  all_passed : run_all_tests(tests)
  
  (all_passed) when true otherwise nothing then
    println("All tests passed! The metacircular evaluators can successfully evaluate themselves in multiple layers.")
  otherwise
    println("Some tests failed. The metacircular evaluators may not be able to fully evaluate themselves in multiple layers.")
  
  all_passed
] : Bool
-- Borf-in-Borf: A Complete Metacircular Implementation
-- This demonstrates a full implementation of Borf in Borf itself

import prim
import syntax

--[[ 
  This module implements a complete Borf interpreter written in Borf.
  It serves as both a reference implementation and a metacircular evaluator,
  enabling Borf to interpret and run its own code.
  
  This follows the approach used by Lisp and other homoiconic languages
  to create reflective programming systems.
]]--

module borf_self

-- Type Definitions
-- ==============
-- Represent Borf's core abstractions in itself

-- Create the AST type quotation using quasiquoting
make_ast_type [->
  `{
    -- Create a type that can represent any Borf AST node
    type BorfAST => #{
      -- Literals
      Num: Int,
      Str: String,
      Sym: String,
      
      -- Core expressions
      Quote: #BorfAST,
      Unquote: #BorfAST,
      Quasiquote: #BorfAST,
      
      -- Type expressions
      TypeQuote: #BorfType,
      TypeUnquote: #BorfAST,
      
      -- Function expressions
      Lambda: { params: List[#BorfParam], body: List[#BorfAST] },
      TypedLambda: { params: List[#BorfParam], body: List[#BorfAST], return_type: #BorfType },
      Apply: { func: #BorfAST, args: List[#BorfAST] },
      
      -- Control flow
      If: { cond: #BorfAST, then_expr: #BorfAST, else_expr: #BorfAST },
      Match: { expr: #BorfAST, patterns: List[{pattern: #BorfPattern, body: #BorfAST}] },
      
      -- Data flow
      Pipe: { left: #BorfAST, right: #BorfAST },
      Assign: { name: String, value: #BorfAST },
      
      -- Module system
      Module: { name: String, imports: List[String], body: List[#BorfAST] },
      Import: String,
      
      -- Type definitions
      TypeDef: { name: String, params: List[#BorfTypeParam], body: #BorfType }
    }
    
    -- Parameter definition
    type BorfParam => #{
      name: String,
      type_annotation: ?#BorfType
    }
    
    -- Type parameter definition
    type BorfTypeParam => #{
      name: String,
      is_linear: Bool
    }
    
    -- Pattern for match expressions
    type BorfPattern => #{
      Wildcard: Unit,
      Literal: #BorfAST,
      Variable: String,
      TypePattern: #BorfType,
      Record: Map[String, #BorfPattern],
      Quoted: #BorfPattern
    }
    
    -- Type representation
    type BorfType => #{
      Simple: String,
      Linear: #BorfType,
      Optional: #BorfType,
      Function: { params: List[#BorfType], return_type: #BorfType },
      Record: Map[String, #BorfType],
      Generic: { name: String, params: List[#BorfType] },
      Union: List[#BorfType]
    }
  }
] : Code

-- Execute the type generator to define our AST types
eval(make_ast_type())

-- Runtime Value representation
make_value_type [->
  `{
    -- Runtime value representation
    type BorfValue => #{
      -- Basic values
      Num: Int,
      Str: String,
      Sym: String,
      Bool: Bool,
      
      -- Container values
      List: List[#BorfValue],
      Map: Map[String, #BorfValue],
      
      -- Function values
      Closure: { params: List[#BorfParam], body: List[#BorfAST], env: #BorfEnv },
      TypedClosure: { params: List[#BorfParam], body: List[#BorfAST], return_type: #BorfType, env: #BorfEnv },
      PrimFunction: { name: String, func: (#BorfValue) => #BorfValue },
      
      -- Special values
      Quoted: #BorfValue,
      Type: #BorfType,
      TypeQuoted: #BorfType,
      Module: { name: String, exports: Map[String, #BorfValue] },
      Nothing: Unit,
      
      -- Linear types
      Linear: #BorfValue,
      Consumed: Unit
    }
    
    -- Environment for variable bindings
    type BorfEnv => #{
      bindings: Map[String, #BorfValue],
      parent: ?#BorfEnv
    }
  }
] : Code

-- Execute the value type generator
eval(make_value_type())

-- Parser Implementation
-- ==================

-- Create a tokenizer for Borf syntax
tokenize [source: String -> 
  tokens -> []
  current -> ""
  in_string -> false
  i -> 0
  
  -- Tokenize the source code character by character
  while i < source |> length {
    char -> source[i]
    
    -- Handle string literals
    if char == "\"" then {
      if in_string then {
        -- End of string
        current <- current + char
        tokens <- tokens + [current]
        current <- ""
        in_string <- false
      } else {
        -- Start of string
        if current != "" then {
          tokens <- tokens + [current]
          current <- ""
        }
        current <- current + char
        in_string <- true
      }
    } else if in_string then {
      -- Inside a string, just append
      current <- current + char
    } else if char == " " or char == "\t" or char == "\n" or char == "\r" then {
      -- Whitespace
      if current != "" then {
        tokens <- tokens + [current]
        current <- ""
      }
    } else if char == "[" or char == "]" or char == "{" or char == "}" then {
      -- Special brackets
      if current != "" then {
        tokens <- tokens + [current]
        current <- ""
      }
      tokens <- tokens + [char]
    } else {
      -- Regular character
      current <- current + char
    }
    
    i <- i + 1
  }
  
  -- Add the last token if any
  if current != "" then
    tokens <- tokens + [current]
  
  tokens
] : List[String]

-- Create a parser for Borf source code
parse [source: String -> 
  tokens -> tokenize(source)
  
  if tokens |> is_empty then
    error("Empty input")
  
  parse_tokens(tokens, 0) |> first
] : BorfAST

-- Parse tokens into an AST (simplified)
parse_tokens [tokens: List[String], pos: Int -> 
  if pos >= tokens |> length then
    error("Unexpected end of input")
  
  token -> tokens[pos]
  
  -- Parse based on token type
  if token |> is_numeric then {
    -- Number literal
    num -> token |> parse_int
    { Num: num, pos: pos + 1 }
  } else if token |> starts_with("\"") and token |> ends_with("\"") then {
    -- String literal
    str -> token |> substring(1, token |> length - 2)
    { Str: str, pos: pos + 1 }
  } else if token == "[" then {
    -- Quotation/lambda
    result -> parse_lambda(tokens, pos + 1)
    { lambda: result.lambda, pos: result.pos }
  } else if token == "{" then {
    -- Record or match expression
    result -> parse_record_or_match(tokens, pos + 1)
    { expr: result.expr, pos: result.pos }
  } else if token == "'" then {
    -- Quote
    inner -> parse_tokens(tokens, pos + 1)
    { Quote: inner.expr, pos: inner.pos }
  } else if token == "#" then {
    -- Type quote
    inner -> parse_type(tokens, pos + 1)
    { TypeQuote: inner.type, pos: inner.pos }
  } else if token == "$" then {
    -- Unquote
    inner -> parse_tokens(tokens, pos + 1)
    { Unquote: inner.expr, pos: inner.pos }
  } else {
    -- Symbol or other identifier
    { Sym: token, pos: pos + 1 }
  }
] : { expr: BorfAST, pos: Int }

-- Parse a lambda expression
parse_lambda [tokens: List[String], pos: Int ->
  params -> []
  has_arrow -> false
  arrow_pos -> pos
  
  -- Look for arrow marker to identify parameters
  while arrow_pos < tokens |> length {
    if tokens[arrow_pos] == "->" then {
      has_arrow <- true
      break
    } else if tokens[arrow_pos] == "]" then
      break
    
    arrow_pos <- arrow_pos + 1
  }
  
  new_pos -> pos
  
  -- Parse parameters if found
  if has_arrow then {
    param_tokens -> tokens |> slice(pos, arrow_pos)
    params <- parse_parameters(param_tokens)
    new_pos <- arrow_pos + 1  -- Skip the arrow
  }
  
  -- Parse the body expressions
  body -> []
  current_pos -> new_pos
  
  while current_pos < tokens |> length {
    if tokens[current_pos] == "]" then {
      -- End of lambda
      current_pos <- current_pos + 1
      
      -- Check for type annotation
      if current_pos < tokens |> length and tokens[current_pos] == ":" then {
        -- TypedLambda with return type
        type_result -> parse_type(tokens, current_pos + 1)
        return { 
          lambda: { TypedLambda: { params: params, body: body, return_type: type_result.type }},
          pos: type_result.pos
        }
      } else {
        -- Regular lambda
        return { 
          lambda: { Lambda: { params: params, body: body }},
          pos: current_pos
        }
      }
    } else {
      -- Parse a body expression
      expr_result -> parse_tokens(tokens, current_pos)
      body <- body + [expr_result.expr]
      current_pos <- expr_result.pos
    }
  }
  
  error("Unclosed lambda expression")
] : { lambda: BorfAST, pos: Int }

-- Parse parameters for a lambda
parse_parameters [tokens: List[String] ->
  params -> []
  i -> 0
  
  while i < tokens |> length {
    token -> tokens[i]
    
    if token == "," then {
      -- Skip comma
      i <- i + 1
    } else {
      -- Parameter name
      name -> token
      type_ann -> nothing
      
      -- Check for type annotation
      if i + 2 < tokens |> length and tokens[i + 1] == ":" then {
        i <- i + 2  -- Skip the colon
        type_result -> parse_type(tokens, i)
        type_ann <- type_result.type |> some
        i <- type_result.pos
      } else {
        i <- i + 1
      }
      
      params <- params + [{ name: name, type_annotation: type_ann }]
    }
  }
  
  params
] : List[BorfParam]

-- Parse a type expression
parse_type [tokens: List[String], pos: Int ->
  if pos >= tokens |> length then
    error("Unexpected end of input in type")
  
  token -> tokens[pos]
  
  if token == "?" then {
    -- Optional type
    inner -> parse_type(tokens, pos + 1)
    { type: { Optional: inner.type }, pos: inner.pos }
  } else if token == "!" then {
    -- Linear type
    inner -> parse_type(tokens, pos + 1)
    { type: { Linear: inner.type }, pos: inner.pos }
  } else if token == "(" then {
    -- Function type
    parse_function_type(tokens, pos + 1)
  } else if token == "{" then {
    -- Record type
    parse_record_type(tokens, pos + 1)
  } else {
    -- Simple type or generic
    if pos + 1 < tokens |> length and tokens[pos + 1] == "[" then {
      -- Generic type with parameters
      name -> token
      params_result -> parse_type_params(tokens, pos + 2)
      { type: { Generic: { name: name, params: params_result.params }}, pos: params_result.pos }
    } else {
      -- Simple type name
      { type: { Simple: token }, pos: pos + 1 }
    }
  }
] : { type: BorfType, pos: Int }

-- Parse function type parameters
parse_function_type [tokens: List[String], pos: Int ->
  params -> []
  current_pos -> pos
  
  -- Parse parameter types
  while current_pos < tokens |> length {
    if tokens[current_pos] == ")" then {
      -- End of parameters, look for =>
      current_pos <- current_pos + 1
      
      if current_pos < tokens |> length and tokens[current_pos] == "=>" then {
        -- Parse return type
        return_result -> parse_type(tokens, current_pos + 1)
        return { 
          type: { Function: { params: params, return_type: return_result.type }},
          pos: return_result.pos
        }
      } else {
        error("Expected => after ) in function type")
      }
    } else if tokens[current_pos] == "," then {
      -- Skip comma
      current_pos <- current_pos + 1
    } else {
      -- Parse parameter type
      param_result -> parse_type(tokens, current_pos)
      params <- params + [param_result.type]
      current_pos <- param_result.pos
    }
  }
  
  error("Unclosed function type")
] : { type: BorfType, pos: Int }

-- Parse record type
parse_record_type [tokens: List[String], pos: Int ->
  fields -> {}
  current_pos -> pos
  
  while current_pos < tokens |> length {
    if tokens[current_pos] == "}" then {
      -- End of record
      return { type: { Record: fields }, pos: current_pos + 1 }
    } else if tokens[current_pos] == "," then {
      -- Skip comma
      current_pos <- current_pos + 1
    } else {
      -- Field name
      name -> tokens[current_pos]
      
      -- Expect colon
      if current_pos + 1 >= tokens |> length or tokens[current_pos + 1] != ":" then
        error("Expected : after field name in record type")
      
      -- Parse field type
      type_result -> parse_type(tokens, current_pos + 2)
      fields <- fields |> insert(name, type_result.type)
      current_pos <- type_result.pos
    }
  }
  
  error("Unclosed record type")
] : { type: BorfType, pos: Int }

-- Parse generic type parameters
parse_type_params [tokens: List[String], pos: Int ->
  params -> []
  current_pos -> pos
  
  while current_pos < tokens |> length {
    if tokens[current_pos] == "]" then {
      -- End of parameters
      return { params: params, pos: current_pos + 1 }
    } else if tokens[current_pos] == "," then {
      -- Skip comma
      current_pos <- current_pos + 1
    } else {
      -- Parse parameter type
      param_result -> parse_type(tokens, current_pos)
      params <- params + [param_result.type]
      current_pos <- param_result.pos
    }
  }
  
  error("Unclosed generic type parameters")
] : { params: List[BorfType], pos: Int }

-- Evaluator Implementation
-- =====================

-- Create a new empty environment
new_env [->
  { bindings: {}, parent: nothing }
] : BorfEnv

-- Create a child environment with a parent
new_env_with_parent [parent: BorfEnv ->
  { bindings: {}, parent: parent |> some }
] : BorfEnv

-- Look up a variable in the environment
lookup [env: BorfEnv, name: String ->
  if env.bindings |> has_key(name) then
    env.bindings[name] |> some
  else if env.parent is some then
    lookup(env.parent |> unwrap, name)
  else
    nothing
] : ?BorfValue

-- Define or update a variable in the environment
define [env: BorfEnv, name: String, value: BorfValue ->
  env.bindings <- env.bindings |> insert(name, value)
  env
] : BorfEnv

-- Evaluate an expression in an environment
evaluate [expr: BorfAST, env: BorfEnv ->
  case expr of
    { Num: n } -> { Num: n }
    { Str: s } -> { Str: s }
    { Sym: name } -> 
      match lookup(env, name) {
        | some(value) -> value
        | nothing -> error("Undefined variable: " + name)
      }
    
    { Quote: inner } -> { Quoted: evaluate(inner, env) }
    { Unquote: inner } -> 
      -- Unquote a quoted value
      quoted -> evaluate(inner, env)
      if quoted is { Quoted: value } then
        value
      else
        error("Cannot unquote non-quoted value")
    
    { TypeQuote: typ } -> { TypeQuoted: typ }
    
    { Lambda: l } -> 
      -- Create a closure with the current environment
      { Closure: { params: l.params, body: l.body, env: env }}
    
    { TypedLambda: l } -> 
      -- Create a typed closure with the current environment
      { TypedClosure: { 
        params: l.params, 
        body: l.body, 
        return_type: l.return_type, 
        env: env 
      }}
    
    { Apply: a } -> 
      -- Evaluate function and arguments
      func -> evaluate(a.func, env)
      args -> a.args |> map [arg -> evaluate(arg, env)]
      
      -- Apply the function
      apply_function(func, args, env)
    
    { If: i } -> 
      -- Evaluate condition
      cond_value -> evaluate(i.cond, env)
      
      -- Check truth value
      if is_truthy(cond_value) then
        evaluate(i.then_expr, env)
      else
        evaluate(i.else_expr, env)
    
    { Match: m } -> 
      -- Evaluate the expression to match against
      value -> evaluate(m.expr, env)
      
      -- Try each pattern
      matched -> false
      result -> { Nothing: () }
      
      m.patterns |> [pattern ->
        if not matched then {
          match_result -> match_pattern(value, pattern.pattern, env)
          
          if match_result.matched then {
            -- Pattern matched, evaluate the body with the match bindings
            result <- evaluate(pattern.body, match_result.env)
            matched <- true
          }
        }
      ] |> for_each
      
      -- Check if any pattern matched
      if matched then
        result
      else
        error("No pattern matched the value")
    
    { Pipe: p } -> 
      -- Evaluate left side
      left_value -> evaluate(p.left, env)
      
      -- Apply to right side based on what it is
      case p.right of
        { Sym: func_name } -> 
          -- Look up function and apply
          match lookup(env, func_name) {
            | some(func) -> apply_function(func, [left_value], env)
            | nothing -> error("Undefined function in pipeline: " + func_name)
          }
        
        { Apply: apply } -> 
          -- Function application with additional arguments
          func -> evaluate(apply.func, env)
          args -> apply.args |> map [arg -> evaluate(arg, env)]
          apply_function(func, [left_value] + args, env)
        
        _ -> 
          -- Evaluate as function and apply to left value
          func -> evaluate(p.right, env)
          apply_function(func, [left_value], env)
    
    { Assign: a } -> 
      -- Evaluate the value
      value -> evaluate(a.value, env)
      
      -- Define in the environment
      define(env, a.name, value)
      
      -- Return the value
      value
    
    { Module: m } -> 
      -- Create a new environment for the module
      module_env -> new_env_with_parent(env)
      
      -- Process imports
      m.imports |> [import_name ->
        -- Import module exports into the module environment
        import_module(import_name, module_env)
      ] |> for_each
      
      -- Evaluate module body
      exports -> {}
      
      m.body |> [expr ->
        result -> evaluate(expr, module_env)
        
        -- If it's an assignment, add to exports
        if expr is { Assign: a } then
          exports <- exports |> insert(a.name, result)
      ] |> for_each
      
      -- Return the module value
      { Module: { name: m.name, exports: exports }}
    
    { Import: module_name } -> 
      -- Import a module's exports into the current environment
      import_module(module_name, env)
      { Nothing: () }
    
    { TypeDef: td } -> 
      -- Define a type and return nothing
      -- In a full implementation, this would add to a type environment
      { Nothing: () }
    
    _ -> error("Unsupported expression type: " + to_string(expr))
] : BorfValue

-- Apply a function to arguments
apply_function [func: BorfValue, args: List[BorfValue], env: BorfEnv ->
  case func of
    { Closure: c } -> 
      -- Create a new environment with the closure's environment as parent
      call_env -> new_env_with_parent(c.env)
      
      -- Bind arguments to parameters
      if args |> length != c.params |> length then
        error("Wrong number of arguments: expected " + to_string(c.params |> length) + 
              ", got " + to_string(args |> length))
      
      -- Bind each parameter
      c.params |> zip(args) |> [pair ->
        param -> pair.0
        arg -> pair.1
        define(call_env, param.name, arg)
      ] |> for_each
      
      -- Evaluate body expressions
      result -> { Nothing: () }
      
      c.body |> [expr ->
        result <- evaluate(expr, call_env)
      ] |> for_each
      
      result
    
    { TypedClosure: tc } -> 
      -- Same as regular closure but with type checking
      -- In a full implementation, would verify argument types
      call_env -> new_env_with_parent(tc.env)
      
      if args |> length != tc.params |> length then
        error("Wrong number of arguments: expected " + to_string(tc.params |> length) + 
              ", got " + to_string(args |> length))
      
      tc.params |> zip(args) |> [pair ->
        param -> pair.0
        arg -> pair.1
        define(call_env, param.name, arg)
      ] |> for_each
      
      result -> { Nothing: () }
      
      tc.body |> [expr ->
        result <- evaluate(expr, call_env)
      ] |> for_each
      
      -- In a full implementation, verify result type matches return_type
      result
    
    { PrimFunction: pf } -> 
      -- Call primitive function with arguments
      if args |> length != 1 then
        -- For simplicity, all primitive functions take a single argument
        -- which can be a list of actual arguments
        pf.func({ List: args })
      else
        pf.func(args[0])
    
    _ -> error("Cannot apply non-function value: " + to_string(func))
] : BorfValue

-- Match a value against a pattern
match_pattern [value: BorfValue, pattern: BorfPattern, env: BorfEnv ->
  -- Create a new environment for pattern bindings
  match_env -> new_env_with_parent(env)
  matched -> false
  
  case pattern of
    { Wildcard: () } -> 
      -- Wildcard matches anything
      matched <- true
    
    { Literal: lit } -> 
      -- Match against a literal value
      lit_value -> evaluate(lit, env)
      matched <- values_equal(value, lit_value)
    
    { Variable: name } -> 
      -- Bind the value to the variable name
      define(match_env, name, value)
      matched <- true
    
    { TypePattern: t } -> 
      -- Match based on type
      value_type -> type_of(value)
      matched <- types_equal(value_type, t)
    
    { Record: fields } -> 
      -- Match against a record pattern
      if value is { Map: value_map } then {
        matched <- true
        
        -- Each field in the pattern must match
        fields |> [name, pattern ->
          if not matched then
            return
          
          if value_map |> has_key(name) then {
            field_result -> match_pattern(value_map[name], pattern, match_env)
            if not field_result.matched then
              matched <- false
            else {
              -- Merge bindings from field match
              field_result.env.bindings |> [binding_name, binding_value ->
                define(match_env, binding_name, binding_value)
              ] |> for_each
            }
          } else {
            matched <- false
          }
        ] |> for_each
      } else {
        matched <- false
      }
    
    { Quoted: inner_pattern } -> 
      -- Match against a quoted pattern
      if value is { Quoted: inner_value } then {
        inner_result -> match_pattern(inner_value, inner_pattern, match_env)
        matched <- inner_result.matched
        
        -- Merge bindings from inner match
        if matched then {
          inner_result.env.bindings |> [name, val ->
            define(match_env, name, val)
          ] |> for_each
        }
      } else {
        matched <- false
      }
  }
  
  { matched: matched, env: match_env }
] : { matched: Bool, env: BorfEnv }

-- Import a module
import_module [module_name: String, env: BorfEnv ->
  -- In a real implementation, this would load modules from files
  -- For our example, we'll just simulate a few built-in modules
  if module_name == "core" then {
    -- Define core functions
    define(env, "add", make_primitive("add", [a, b -> 
      if a is { Num: n1 } and b is { Num: n2 } then
        { Num: n1 + n2 }
      else
        error("add requires numbers")
    ]))
    
    define(env, "sub", make_primitive("sub", [a, b -> 
      if a is { Num: n1 } and b is { Num: n2 } then
        { Num: n1 - n2 }
      else
        error("sub requires numbers")
    ]))
    
    define(env, "print", make_primitive("print", [value -> 
      println(value_to_string(value))
      { Nothing: () }
    ]))
  } else if module_name == "meta" then {
    -- Define metaprogramming functions
    define(env, "eval", make_primitive("eval", [code -> 
      if code is { Quoted: value } then {
        if value is { Str: source } then {
          -- Parse and evaluate string code
          ast -> parse(source)
          evaluate(ast, env)
        } else {
          -- Evaluate AST node
          evaluate(value, env)
        }
      } else {
        error("eval requires quoted code")
      }
    ]))
    
    define(env, "parse", make_primitive("parse", [source -> 
      if source is { Str: code } then
        parse(code)
      else
        error("parse requires a string")
    ]))
  } else {
    error("Unknown module: " + module_name)
  }
] : BorfEnv

-- Create a primitive function
make_primitive [name: String, func: (BorfValue) => BorfValue ->
  { PrimFunction: { name: name, func: func }}
] : BorfValue

-- Check if a value is truthy
is_truthy [value: BorfValue ->
  case value of
    { Num: n } -> n != 0
    { Str: s } -> s != ""
    { Bool: b } -> b
    { List: items } -> not (items |> is_empty)
    { Nothing: () } -> false
    _ -> true
] : Bool

-- Get the type of a value
type_of [value: BorfValue ->
  case value of
    { Num: _ } -> { Simple: "Num" }
    { Str: _ } -> { Simple: "String" }
    { Bool: _ } -> { Simple: "Bool" }
    { List: _ } -> { Generic: { name: "List", params: [{ Simple: "Any" }] }}
    { Map: _ } -> { Simple: "Map" }
    { Closure: _ } -> { Simple: "Function" }
    { TypedClosure: c } -> { Function: { params: [], return_type: c.return_type }}
    { Module: _ } -> { Simple: "Module" }
    { Nothing: () } -> { Simple: "Nothing" }
    _ -> { Simple: "Any" }
] : BorfType

-- Check if two values are equal
values_equal [a: BorfValue, b: BorfValue ->
  case (a, b) of
    ({ Num: n1 }, { Num: n2 }) -> n1 == n2
    ({ Str: s1 }, { Str: s2 }) -> s1 == s2
    ({ Bool: b1 }, { Bool: b2 }) -> b1 == b2
    ({ Nothing: () }, { Nothing: () }) -> true
    _ -> false
] : Bool

-- Check if two types are equal
types_equal [a: BorfType, b: BorfType ->
  case (a, b) of
    ({ Simple: s1 }, { Simple: s2 }) -> s1 == s2
    ({ Linear: l1 }, { Linear: l2 }) -> types_equal(l1, l2)
    ({ Optional: o1 }, { Optional: o2 }) -> types_equal(o1, o2)
    ({ Generic: g1 }, { Generic: g2 }) -> 
      g1.name == g2.name and g1.params |> length == g2.params |> length and
      (g1.params |> zip(g2.params) |> all [pair -> types_equal(pair.0, pair.1)])
    ({ Function: f1 }, { Function: f2 }) ->
      f1.params |> length == f2.params |> length and
      f1.params |> zip(f2.params) |> all [pair -> types_equal(pair.0, pair.1)] and
      types_equal(f1.return_type, f2.return_type)
    ({ Record: r1 }, { Record: r2 }) ->
      r1 |> keys |> set_equals(r2 |> keys) and
      r1 |> all [k, v -> r2 |> has_key(k) and types_equal(v, r2[k])]
    _ -> false
] : Bool

-- Convert a value to a string representation
value_to_string [value: BorfValue ->
  case value of
    { Num: n } -> n |> to_string
    { Str: s } -> "\"" + s + "\""
    { Bool: b } -> b |> to_string
    { List: items } -> 
      "[" + (items |> map(value_to_string) |> join(", ")) + "]"
    { Map: entries } -> 
      "{" + (entries |> map [k, v -> k + ": " + value_to_string(v)] |> join(", ")) + "}"
    { Closure: _ } -> "[function]"
    { TypedClosure: c } -> "[function: " + type_to_string(c.return_type) + "]"
    { PrimFunction: p } -> "[primitive: " + p.name + "]"
    { Quoted: v } -> "'" + value_to_string(v)
    { TypeQuoted: t } -> "#" + type_to_string(t)
    { Module: m } -> "module " + m.name
    { Nothing: () } -> "nothing"
    _ -> "[value]"
] : String

-- Convert a type to a string representation
type_to_string [type: BorfType ->
  case type of
    { Simple: name } -> name
    { Linear: inner } -> "!" + type_to_string(inner)
    { Optional: inner } -> "?" + type_to_string(inner)
    { Generic: g } -> 
      g.name + "[" + (g.params |> map(type_to_string) |> join(", ")) + "]"
    { Function: f } -> 
      "(" + (f.params |> map(type_to_string) |> join(", ")) + 
      ") => " + type_to_string(f.return_type)
    { Record: fields } -> 
      "{" + (fields |> map [k, v -> k + ": " + type_to_string(v)] |> join(", ")) + "}"
    { Union: types } -> 
      types |> map(type_to_string) |> join(" | ")
  }
] : String

-- REPL Implementation
-- =================

-- Create a REPL for interactive Borf evaluation
borf_repl [->
  env -> new_env()
  
  -- Initialize with standard libraries
  import_module("core", env)
  import_module("meta", env)
  
  println("Borf-in-Borf REPL")
  println("Type 'exit' to quit")
  
  while true {
    print("borf> ")
    input -> read_line()
    
    if input == "exit" then
      break
    
    try {
      -- Parse the input
      ast -> parse(input)
      
      -- Evaluate the expression
      result -> evaluate(ast, env)
      
      -- Print the result
      println("=> " + value_to_string(result))
    } catch error {
      println("Error: " + error)
    }
  }
] : ()

-- Example code that demonstrates self-evaluation
-- =========================================

-- Example 1: Basic self-evaluation
example1 [->
  -- Initialize environment
  env -> new_env()
  import_module("core", env)
  
  -- Define a simple expression in Borf syntax
  code -> "5 10 add"
  
  -- Parse the code into an AST
  ast -> parse(code)
  
  -- Evaluate the AST
  result -> evaluate(ast, env)
  
  -- Print the result
  println("Example 1 result: " + value_to_string(result))
] : ()

-- Example 2: Metaprogramming with self-evaluation
example2 [->
  -- Initialize environment
  env -> new_env()
  import_module("core", env)
  import_module("meta", env)
  
  -- Define code that generates code
  meta_code -> "
    [x -> 
      [y -> x y add]
    ] -> make_adder
    
    5 make_adder -> add5
    10 add5
  "
  
  -- Parse and evaluate the metaprogramming code
  ast -> parse(meta_code)
  result -> evaluate(ast, env)
  
  -- Print the result
  println("Example 2 result: " + value_to_string(result))
] : ()

-- Example 3: Type metaprogramming
example3 [->
  -- Initialize environment
  env -> new_env()
  import_module("core", env)
  import_module("meta", env)
  
  -- Define code that generates a type
  type_code -> "
    [t1, t2 -> 
      #{ first: $t1, second: $t2 }
    ] -> make_pair_type
    
    #Int #String make_pair_type -> int_string_pair
    
    int_string_pair
  "
  
  -- Parse and evaluate
  ast -> parse(type_code)
  result -> evaluate(ast, env)
  
  -- Print the result
  println("Example 3 result: " + value_to_string(result))
] : ()

-- Main function to run the examples
main [->
  println("Running Borf-in-Borf examples...")
  
  -- Run the examples
  example1()
  example2()
  example3()
  
  -- Run the REPL if requested
  if args |> contains("--repl") then
    borf_repl()
  
  println("Borf-in-Borf completed successfully.")
] : ()